[{"content":"import rclpy from rclpy.action import ActionClient from rclpy.node import Node from action_tutorials_interfaces.action import Fibonacci class FibonacciActionClient(Node): def init(self): super().init(\u0026#39;fibonacci_action_client\u0026#39;) self._action_client = ActionClient(self, Fibonacci, \u0026#39;fibonacci\u0026#39;) def send_goal(self, order): goal_msg = Fibonacci.Goal() goal_msg.order = order self._action_client.wait_for_server() self._send_goal_future = self._action_client.send_goal_async(goal_msg, feedback_callback=self.feedback_callback) self._send_goal_future.add_done_callback(self.goal_response_callback) def goal_response_callback(self, future): goal_handle = future.result() if not goal_handle.accepted: self.get_logger().info(\u0026#39;Goal rejected :(\u0026#39;) return self.get_logger().info(\u0026#39;Goal accepted :)\u0026#39;) self._get_result_future = goal_handle.get_result_async() self._get_result_future.add_done_callback(self.get_result_callback) def get_result_callback(self, future): result = future.result().result self.get_logger().info(\u0026#39;Result: {0}\u0026#39;.format(result.sequence)) rclpy.shutdown() def feedback_callback(self, feedback_msg): feedback = feedback_msg.feedback self.get_logger().info(\u0026#39;Received feedback: {0}\u0026#39;.format(feedback.partial_sequence)) def main(args=None): rclpy.init(args=args) action_client = FibonacciActionClient() action_client.send_goal(10) rclpy.spin(action_client) if __name__ == \u0026#39;__main__\u0026#39;: main() Hugo和PaperMod 为什么选择Hugo和PaperMod？ 阿里云OSS 尝试过Hugo配合GitHub Pages来建站，\n搭建网站 结语 搭建个人网站=“折腾”\nHugo+PaperMod+阿里云OSS搭建网站\n2023-01-30 · 1 min · 129 words · LYOUL\nHugo和PaperMod 为什么选择Hugo和PaperMod？ 阿里云OSS 尝试过Hugo配合GitHub Pages来建站，\n搭建网站# 结语 搭建个人网站=“折腾” 1 1 1 1 1\n1 1 1 1 1 1dasdas 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 asfas asfasf asf asf 1 123 1 32 13 21 321 3 12 #3 23 12 32 123 32123\n","permalink":"https://lyoul.top/posts/hugopapermodoss/","summary":"import rclpy from rclpy.action import ActionClient from rclpy.node import Node from action_tutorials_interfaces.action import Fibonacci class FibonacciActionClient(Node): def init(self): super().init(\u0026#39;fibonacci_action_client\u0026#39;) self._action_client = ActionClient(self, Fibonacci, \u0026#39;fibonacci\u0026#39;) def send_goal(self, order): goal_msg = Fibonacci.Goal() goal_msg.order = order self._action_client.wait_for_server() self._send_goal_future = self._action_client.send_goal_async(goal_msg, feedback_callback=self.feedback_callback) self._send_goal_future.add_done_callback(self.goal_response_callback) def goal_response_callback(self, future): goal_handle = future.result() if not goal_handle.accepted: self.get_logger().info(\u0026#39;Goal rejected :(\u0026#39;) return self.get_logger().info(\u0026#39;Goal accepted :)\u0026#39;) self._get_result_future = goal_handle.get_result_async() self._get_result_future.add_done_callback(self.get_result_callback) def get_result_callback(self, future): result = future.result().result self.get_logger().info(\u0026#39;Result: {0}\u0026#39;.format(result.sequence)) rclpy.shutdown() def feedback_callback(self, feedback_msg): feedback = feedback_msg.feedback self.get_logger().info(\u0026#39;Received feedback: {0}\u0026#39;.format(feedback.partial_sequence)) def main(args=None): rclpy.init(args=args) action_client = FibonacciActionClient() action_client.send_goal(10) rclpy.spin(action_client) if __name__ == \u0026#39;__main__\u0026#39;: main() Hugo和PaperMod 为什么选择Hugo和PaperMod？ 阿里云OSS 尝试过Hugo配合GitHub Pages来建站，\n搭建网站 结语 搭建个人网站=“折腾”\nHugo+PaperMod+阿里云OSS搭建网站\n2023-01-30 · 1 min · 129 words · LYOUL\nHugo和PaperMod 为什么选择Hugo和PaperMod？ 阿里云OSS 尝试过Hugo配合GitHub Pages来建站，\n搭建网站# 结语 搭建个人网站=“折腾” 1 1 1 1 1\n1 1 1 1 1 1dasdas 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 asfas asfasf asf asf 1 123 1 32 13 21 321 3 12 #3 23 12 32 123 32123","title":"Hugo+PaperMod+阿里云OSS搭建网站"},{"content":"你好\n","permalink":"https://lyoul.top/about/","summary":"你好","title":""},{"content":"","permalink":"https://lyoul.top/read/","summary":"","title":"📚阅读"}]